import pathlib
import textwrap

from tasks import utils


def get_module_docstring():
    return textwrap.dedent(
        '''
        """
        This file contains SQLAlchemy objects that represent Job Server's tables.
        To create them, call `metadata.create_all(bind=<engine>)`.

        This file was generated by `python -m tests.jobserver.get_tables`.
        Do not edit it directly.
        """
        '''
    )


def get_imports():
    return textwrap.dedent(
        """
        from sqlalchemy import (
            ARRAY,
            BIGINT,
            BOOLEAN,
            INTEGER,
            SMALLINT,
            TEXT,
            TIMESTAMP,
            VARCHAR,
            Column,
            ForeignKey,
            Identity,
            MetaData,
            Table,
            Text,
        )
        from sqlalchemy.dialects.postgresql import INTERVAL, JSONB


        """
    )


def get_metadata():
    return "metadata = MetaData()\n\n"


def get_table(table):
    table_repr = repr(table)
    table_repr = table_repr.replace(f", table=<{table.name}>", "")
    table_repr = table_repr.replace("MetaData()", "metadata")
    return table_repr


def main():
    engine = utils.get_engine(utils.Database.JOBSERVER)
    metadata = utils.get_metadata(engine)
    d_path = pathlib.Path(__file__).parent
    f_path = d_path / "tables.py"
    text = get_module_docstring()
    text += get_imports()
    text += get_metadata()
    text += "\n\n".join(get_table(t) for t in metadata.sorted_tables)
    f_path.write_text(text)


if __name__ == "__main__":
    main()
